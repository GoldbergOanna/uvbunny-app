name: Deploy to Firebase Hosting on PR

on:
  pull_request:

permissions:
  checks: write
  contents: read
  pull-requests: write

concurrency:
  group: hosting-pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build_and_preview:
    # Prevents secrets exposure from forks (keeps using your repo only)
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Fail fast if any secret is missing
      - name: Assert Firebase secrets exist
        run: |
          for v in FIREBASE_API_KEY FIREBASE_AUTH_DOMAIN FIREBASE_PROJECT_ID FIREBASE_STORAGE_BUCKET FIREBASE_MESSAGING_SENDER_ID FIREBASE_APP_ID FIREBASE_MEASUREMENT_ID; do
            if [ -z "${!v}" ]; then echo "❌ Missing $v"; exit 1; fi
          done
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

      - name: Install dependencies
        run: npm ci

      # Create BOTH env files BEFORE build
      - name: Create environment files
        run: |
          mkdir -p src/environments
          cat > src/environments/environment.ts <<'EOF'
          export const environment = {
            production: false,
            firebase: {
              apiKey: '${{ secrets.FIREBASE_API_KEY }}',
              authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              appId: '${{ secrets.FIREBASE_APP_ID }}',
              measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}'
            }
          };
          EOF
          cat > src/environments/environment.prod.ts <<'EOF'
          export const environment = {
            production: true,
            firebase: {
              apiKey: '${{ secrets.FIREBASE_API_KEY }}',
              authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              appId: '${{ secrets.FIREBASE_APP_ID }}',
              measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}'
            }
          };
          EOF

      # Explicit prod build (ensures fileReplacements → environment.prod.ts)
      - name: Build application (prod)
        run: |
          rm -rf dist
          npx ng build --configuration production

      # Guardrail: fail if placeholders/markers exist in the bundle
      - name: Assert no placeholders in dist
        run: |
          if grep -R -E "REPLACED_IN_CI|__FIREBASE_" dist -n; then
            echo "❌ Placeholder tokens detected in built bundle"; exit 1; fi

      - name: Deploy to Firebase Hosting Preview
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UVBUNNY_APP }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          channelId: pr-${{ github.event.pull_request.number }}
          expires: 7d

      - name: Cleanup environment files
        if: always()
        run: rm -f src/environments/environment.ts src/environments/environment.prod.ts
