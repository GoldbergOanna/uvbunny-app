name: Deploy to Firebase Hosting on main push

on:
  push:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # 0) Fail fast if any secret is missing (now includes service account)
      - name: Assert Firebase secrets exist
        run: |
          for v in FIREBASE_API_KEY FIREBASE_AUTH_DOMAIN FIREBASE_PROJECT_ID FIREBASE_STORAGE_BUCKET FIREBASE_MESSAGING_SENDER_ID FIREBASE_APP_ID FIREBASE_MEASUREMENT_ID FIREBASE_SERVICE_ACCOUNT; do
            if [ -z "${!v}" ]; then echo "❌ Missing $v"; exit 1; fi
          done
        env:
          FIREBASE_API_KEY:               ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN:           ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID:            ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET:        ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID:   ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID:                ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID:        ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          FIREBASE_SERVICE_ACCOUNT:       ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UVBUNNY_APP }}

      - name: Install dependencies
        run: npm ci

      # 1) Generate env files BEFORE build (named + default export)
      - name: Generate environment files
        run: |
          mkdir -p src/environments

          cat > src/environments/environment.ts <<'EOF'
          export const environment = {
            production: false,
            firebase: {
              apiKey: '${{ secrets.FIREBASE_API_KEY }}',
              authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              appId: '${{ secrets.FIREBASE_APP_ID }}',
              measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}'
            }
          };
          // keep compatibility if code does: "import environment from ..."
          export default environment;
          EOF

          cat > src/environments/environment.prod.ts <<'EOF'
          export const environment = {
            production: true,
            firebase: {
              apiKey: '${{ secrets.FIREBASE_API_KEY }}',
              authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              appId: '${{ secrets.FIREBASE_APP_ID }}',
              measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}'
            }
          };
          export default environment;
          EOF

      # 2) Explicit prod build (ensures fileReplacements -> environment.prod.ts)
      - name: Build Angular app (prod)
        run: |
          rm -rf dist
          npx ng build --configuration production

      # 3) Guardrail: only fail on YOUR placeholders (not Firebase internals)
      - name: Assert no unresolved placeholders in dist
        run: |
          # Adjust patterns to your real placeholders
          if grep -R -n -E '\bREPLACED_IN_CI\b|projects/REPLACED_IN_CI' dist --include='*.{js,html,css}'; then
            echo "❌ Unresolved CI placeholder(s) detected in built assets"; exit 1
          fi

      # 4) Deploy
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UVBUNNY_APP }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          channelId: live
