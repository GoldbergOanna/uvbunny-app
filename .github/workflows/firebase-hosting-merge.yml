# This file was auto-generated by the Firebase CLI and modified for secure environment management
# https://github.com/firebase/firebase-tools
#
# Required GitHub Secrets (set in repository Settings > Secrets and variables > Actions):
# - FIREBASE_API_KEY: Your Firebase API key
# - FIREBASE_AUTH_DOMAIN: Your Firebase auth domain
# - FIREBASE_PROJECT_ID: Your Firebase project ID
# - FIREBASE_STORAGE_BUCKET: Your Firebase storage bucket
# - FIREBASE_MESSAGING_SENDER_ID: Your Firebase messaging sender ID
# - FIREBASE_APP_ID: Your Firebase app ID
# - FIREBASE_MEASUREMENT_ID: Your Firebase measurement ID
# - FIREBASE_SERVICE_ACCOUNT_UVBUNNY_APP: Firebase service account key (JSON)

name: Deploy to Firebase Hosting on merge
on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Validate required secrets
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UVBUNNY_APP }}
        run: |
          echo "🔍 Validating required GitHub Secrets..."
          MISSING_SECRETS=()
          
          # Check required secrets using environment variables for safe handling
          if [[ -z "${FIREBASE_API_KEY}" ]]; then
            MISSING_SECRETS+=("FIREBASE_API_KEY")
          fi
          if [[ -z "${FIREBASE_AUTH_DOMAIN}" ]]; then
            MISSING_SECRETS+=("FIREBASE_AUTH_DOMAIN")
          fi
          if [[ -z "${FIREBASE_PROJECT_ID}" ]]; then
            MISSING_SECRETS+=("FIREBASE_PROJECT_ID")
          fi
          if [[ -z "${FIREBASE_STORAGE_BUCKET}" ]]; then
            MISSING_SECRETS+=("FIREBASE_STORAGE_BUCKET")
          fi
          if [[ -z "${FIREBASE_MESSAGING_SENDER_ID}" ]]; then
            MISSING_SECRETS+=("FIREBASE_MESSAGING_SENDER_ID")
          fi
          if [[ -z "${FIREBASE_APP_ID}" ]]; then
            MISSING_SECRETS+=("FIREBASE_APP_ID")
          fi
          if [[ -z "${FIREBASE_SERVICE_ACCOUNT}" ]]; then
            MISSING_SECRETS+=("FIREBASE_SERVICE_ACCOUNT_UVBUNNY_APP")
          fi
          
          # FIREBASE_MEASUREMENT_ID is optional for Google Analytics
          if [[ -z "${FIREBASE_MEASUREMENT_ID}" ]]; then
            echo "⚠️  FIREBASE_MEASUREMENT_ID is not set (Google Analytics will be disabled)"
          fi
          
          if [[ ${#MISSING_SECRETS[@]} -ne 0 ]]; then
            echo "❌ Missing required GitHub Secrets:"
            printf "%s\n" "${MISSING_SECRETS[@]}"
            echo ""
            echo "Please add these secrets in repository Settings > Secrets and variables > Actions"
            echo "See .github/secrets-setup.md for detailed instructions"
            exit 1
          fi
          
          echo "✅ All required secrets are configured"

      - name: Install dependencies
        run: npm ci

      - name: Create environment files from secrets
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
        run: |
          echo "🔧 Creating environment files from GitHub Secrets..."
          
          # Validate that all required environment variables are set
          if [[ -z "${FIREBASE_API_KEY}" || -z "${FIREBASE_AUTH_DOMAIN}" || -z "${FIREBASE_PROJECT_ID}" || -z "${FIREBASE_STORAGE_BUCKET}" || -z "${FIREBASE_MESSAGING_SENDER_ID}" || -z "${FIREBASE_APP_ID}" ]]; then
            echo "❌ One or more required Firebase environment variables are missing"
            echo "This should have been caught in the validation step"
            exit 1
          fi
          
          # Set fallback for optional measurement ID
          MEASUREMENT_ID="${FIREBASE_MEASUREMENT_ID:-\"\"}"
          if [[ -z "${FIREBASE_MEASUREMENT_ID}" ]]; then
            echo "ℹ️  Using empty string for measurementId (Google Analytics disabled)"
          else
            MEASUREMENT_ID="\"${FIREBASE_MEASUREMENT_ID}\""
          fi
          
          # Ensure environments directory exists
          echo "📁 Creating environments directory..."
          mkdir -p src/environments
          
          if [[ ! -d "src/environments" ]]; then
            echo "❌ Failed to create src/environments directory"
            exit 1
          fi
          
          echo "✅ Directory src/environments/ created successfully"
          
          # Create production environment file with proper TypeScript structure
          echo "📝 Creating production environment file..."
          cat > src/environments/environment.prod.ts << 'ENV_PROD_EOF'
// Generated automatically from GitHub Secrets during CI/CD
// DO NOT EDIT - This file is created during the build process

interface FirebaseConfig {
  apiKey: string;
  authDomain: string;
  projectId: string;
  storageBucket: string;
  messagingSenderId: string;
  appId: string;
  measurementId: string;
}

const firebaseConfig: FirebaseConfig = {
ENV_PROD_EOF
          
          # Add configuration values with proper escaping and validation
          echo "  apiKey: \"${FIREBASE_API_KEY}\"," >> src/environments/environment.prod.ts
          echo "  authDomain: \"${FIREBASE_AUTH_DOMAIN}\"," >> src/environments/environment.prod.ts
          echo "  projectId: \"${FIREBASE_PROJECT_ID}\"," >> src/environments/environment.prod.ts
          echo "  storageBucket: \"${FIREBASE_STORAGE_BUCKET}\"," >> src/environments/environment.prod.ts
          echo "  messagingSenderId: \"${FIREBASE_MESSAGING_SENDER_ID}\"," >> src/environments/environment.prod.ts
          echo "  appId: \"${FIREBASE_APP_ID}\"," >> src/environments/environment.prod.ts
          echo "  measurementId: ${MEASUREMENT_ID}" >> src/environments/environment.prod.ts
          
          cat >> src/environments/environment.prod.ts << 'ENV_PROD_EOF'
};

export const environment = {
  production: true,
  firebase: {
    apiKey: firebaseConfig.apiKey,
    authDomain: firebaseConfig.authDomain,
    projectId: firebaseConfig.projectId,
    storageBucket: firebaseConfig.storageBucket,
    messagingSenderId: firebaseConfig.messagingSenderId,
    appId: firebaseConfig.appId,
    measurementId: firebaseConfig.measurementId,
  }
};
ENV_PROD_EOF
          
          # Verify production file was created
          if [[ ! -f "src/environments/environment.prod.ts" ]]; then
            echo "❌ Failed to create environment.prod.ts"
            exit 1
          fi
          
          echo "✅ Production environment file created successfully"
          
          # Create development environment file with proper TypeScript structure
          echo "📝 Creating development environment file..."
          cat > src/environments/environment.ts << 'ENV_DEV_EOF'
// Generated automatically from GitHub Secrets during CI/CD
// DO NOT EDIT - This file is created during the build process

interface FirebaseConfig {
  apiKey: string;
  authDomain: string;
  projectId: string;
  storageBucket: string;
  messagingSenderId: string;
  appId: string;
  measurementId: string;
}

const firebaseConfig: FirebaseConfig = {
ENV_DEV_EOF
          
          # Add configuration values with proper escaping and validation
          echo "  apiKey: \"${FIREBASE_API_KEY}\"," >> src/environments/environment.ts
          echo "  authDomain: \"${FIREBASE_AUTH_DOMAIN}\"," >> src/environments/environment.ts
          echo "  projectId: \"${FIREBASE_PROJECT_ID}\"," >> src/environments/environment.ts
          echo "  storageBucket: \"${FIREBASE_STORAGE_BUCKET}\"," >> src/environments/environment.ts
          echo "  messagingSenderId: \"${FIREBASE_MESSAGING_SENDER_ID}\"," >> src/environments/environment.ts
          echo "  appId: \"${FIREBASE_APP_ID}\"," >> src/environments/environment.ts
          echo "  measurementId: ${MEASUREMENT_ID}" >> src/environments/environment.ts
          
          cat >> src/environments/environment.ts << 'ENV_DEV_EOF'
};

export const environment = {
  production: false,
  firebase: {
    apiKey: firebaseConfig.apiKey,
    authDomain: firebaseConfig.authDomain,
    projectId: firebaseConfig.projectId,
    storageBucket: firebaseConfig.storageBucket,
    messagingSenderId: firebaseConfig.messagingSenderId,
    appId: firebaseConfig.appId,
    measurementId: firebaseConfig.measurementId,
  }
};
ENV_DEV_EOF
          
          # Verify development file was created
          if [[ ! -f "src/environments/environment.ts" ]]; then
            echo "❌ Failed to create environment.ts"
            exit 1
          fi
          
          echo "✅ Development environment file created successfully"
          echo "✅ All environment files created successfully"

      - name: Verify environment files
        run: |
          echo "🔍 Verifying generated environment files..."

          if [ ! -f "src/environments/environment.ts" ]; then
            echo "❌ environment.ts was not created"
            exit 1
          fi

          if [ ! -f "src/environments/environment.prod.ts" ]; then
            echo "❌ environment.prod.ts was not created"
            exit 1
          fi

          # Check if files contain the expected structure (without revealing secrets)
          if grep -q "export const environment" src/environments/environment.ts && \
             grep -q "production: false" src/environments/environment.ts; then
            echo "✅ environment.ts has correct structure"
          else
            echo "❌ environment.ts has incorrect structure"
            exit 1
          fi

          if grep -q "export const environment" src/environments/environment.prod.ts && \
             grep -q "production: true" src/environments/environment.prod.ts; then
            echo "✅ environment.prod.ts has correct structure"
          else
            echo "❌ environment.prod.ts has incorrect structure"
            exit 1
          fi

      - name: Build application
        run: |
          echo "🏗️ Building application for production..."
          npm run build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UVBUNNY_APP }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UVBUNNY_APP }}
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Cleanup environment files
        if: always()
        run: |
          echo "🧹 Cleaning up generated environment files..."
          rm -f src/environments/environment.ts
          rm -f src/environments/environment.prod.ts
          echo "✅ Cleanup completed"
